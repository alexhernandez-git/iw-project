import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { RootState } from "..";
import { SliceState, User } from "../../utils/types";
import { fetchUsers } from "./API";

export interface UsersState {
  value: {
    count: number;
    page: number;
    size: number;
    data: User[];
  };
  status: SliceState;
}

const initialState: UsersState = {
  value: {
    count: 0,
    page: 0,
    size: 0,
    data: [],
  },
  status: SliceState.Inactive,
};

export const getUsers = createAsyncThunk("users/getUsers", async () => {
  const response = await fetchUsers();
  return response.data.users;
});

export const counterSlice = createSlice({
  name: "users",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {},
});

export const {} = counterSlice.actions;

export const selectUsers = (state: RootState) => state.users.value;

export default counterSlice.reducer;
