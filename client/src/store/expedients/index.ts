import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { RootState } from "..";
import { SliceState, Expedient } from "../../utils/types";
import { createExpedient, fetchExpedients } from "./API";

export interface ExpedientsState {
  value: {
    count: number;
    page: number;
    size: number;
    data: Expedient[];
  };
  status: SliceState;
}

const initialState: ExpedientsState = {
  value: {
    count: 0,
    page: 0,
    size: 0,
    data: [],
  },
  status: SliceState.Inactive,
};

export const getExpedients = createAsyncThunk(
  "expedients/getExpedients",
  async ({
    page = 1,
    search = "",
    filters = {},
  }: {
    page?: number;
    search?: string;
    filters?: { [x: string]: string[] };
  }) => {
    const response = await fetchExpedients({ page, search, filters });
    return response.data;
  }
);

export const counterSlice = createSlice({
  name: "expedients",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getExpedients.pending, (state) => {
        state.status = SliceState.Loading;
      })
      .addCase(getExpedients.fulfilled, (state, action) => {
        state.status = SliceState.Success;
        state.value = action.payload;
      })
      .addCase(getExpedients.rejected, (state) => {
        state.status = SliceState.Failed;
      });
  },
});

export const {} = counterSlice.actions;

export const selectExpedients = (state: RootState) => state.expedients.value;

export default counterSlice.reducer;
