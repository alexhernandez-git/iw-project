import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { RootState } from "../../store";
import { SliceState, User } from "../../utils/types";
import { fetchUser, userLogin } from "./API";

export interface UserStateState {
  value: User | null;
  status: SliceState;
}

const initialState: UserStateState = {
  value: null,
  status: SliceState.Inactive,
};
// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const login = createAsyncThunk(
  "user/login",
  async ({ username, password }: { username: string; password: string }) => {
    const response = await userLogin({ username, password });
    console.log({ response });
    localStorage.setItem("token", response.data.accessToken);
    return response.data.user;
  }
);

export const getUser = createAsyncThunk("user/getUser", async () => {
  const token = localStorage.getItem("token") ?? "";
  const response = await fetchUser(token);
  console.log({ response });
  return response.data;
});

export const userSlice = createSlice({
  name: "user",
  initialState,
  reducers: {
    signOut: (state) => {
      state.value = null;
      localStorage.clear();
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(login.pending, (state) => {
        state.status = SliceState.Loading;
      })
      .addCase(login.fulfilled, (state, action) => {
        state.status = SliceState.Success;
        state.value = action.payload;
      })
      .addCase(login.rejected, (state) => {
        state.status = SliceState.Failed;
      })
      .addCase(getUser.pending, (state) => {
        state.status = SliceState.Loading;
      })
      .addCase(getUser.fulfilled, (state, action) => {
        state.status = SliceState.Success;
        state.value = action.payload.user;
      })
      .addCase(getUser.rejected, (state) => {
        state.status = SliceState.Failed;
      });
  },
});

export const { signOut } = userSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectUser = (state: RootState) => state.user.value;

export default userSlice.reducer;
