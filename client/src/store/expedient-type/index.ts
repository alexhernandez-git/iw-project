import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { RootState } from "..";
import { SliceState, ExpedientType } from "../../utils/types";
import {
  createExpedientType,
  fetchExpedientType,
  updateExpedientType,
} from "./API";

export interface ExpedientTypeState {
  value: ExpedientType | null;
  status: SliceState;
}

const initialState: ExpedientTypeState = {
  value: null,
  status: SliceState.Inactive,
};

export const getExpedientType = createAsyncThunk(
  "expedients/getExpedientType",
  async (id: string) => {
    const response = await fetchExpedientType(id);
    return response.data.expedientType;
  }
);

export const newExpedientType = createAsyncThunk(
  "expedients/newExpedientType",
  async (values: ExpedientType) => {
    const response = await createExpedientType(values);
    return response.data.expedientType;
  }
);

export const editExpedientType = createAsyncThunk(
  "expedients/editExpedientType",
  async ({ id, data }: { id: string; data: any }) => {
    const response = await updateExpedientType(id, data);
    return response.data.expedientType;
  }
);

export const counterSlice = createSlice({
  name: "expedientType",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getExpedientType.pending, (state) => {
        state.status = SliceState.Loading;
      })
      .addCase(getExpedientType.fulfilled, (state, action) => {
        state.status = SliceState.Success;
        state.value = action.payload;
      })
      .addCase(getExpedientType.rejected, (state) => {
        state.status = SliceState.Failed;
      })
      .addCase(newExpedientType.pending, (state) => {
        state.status = SliceState.Loading;
      })
      .addCase(newExpedientType.fulfilled, (state, action) => {
        state.status = SliceState.Success;
        state.value = action.payload;
      })
      .addCase(newExpedientType.rejected, (state) => {
        state.status = SliceState.Failed;
      })
      .addCase(editExpedientType.pending, (state) => {
        state.status = SliceState.Loading;
      })
      .addCase(editExpedientType.fulfilled, (state, action) => {
        state.status = SliceState.Success;
        state.value = action.payload;
      })
      .addCase(editExpedientType.rejected, (state) => {
        state.status = SliceState.Failed;
      });
  },
});

export const {} = counterSlice.actions;

export const selectExpedientType = (state: RootState) => state.expedients.value;

export default counterSlice.reducer;
